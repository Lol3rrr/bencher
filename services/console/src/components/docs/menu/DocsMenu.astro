---
import {DocsTab, DocsMenuId} from "./docs_tab.tsx";
import {Language, architecture, benchmarking, defaultLang, explanation, howTo, reference, tutorial } from "../../../i18n/ui.ts";
import {getEnCollection, getLangCollection, langPath} from "../../../i18n/utils.ts"
import LangButton from "../../../i18n/LangButton.astro";
import Collection, { collectionPath } from "../../../util/collection.ts";

interface Props {
  tab: DocsTab;
  lang?: undefined | string;
  collection?: undefined | Collection;
  slug?: undefined | string;
}

// Docs
const tutorialCollection = await getLangCollection(Collection.tutorial);
const howToCollection = await getLangCollection(Collection.how_to);
const explanationCollection = await getLangCollection(Collection.explanation);
const referenceCollection = await getLangCollection(Collection.reference);

// Api
const organizationsCollection = await getEnCollection(Collection.organizations);
const projectsCollection = await getEnCollection(Collection.projects);
const usersCollection = await getEnCollection(Collection.users);
const serverCollection = await getEnCollection(Collection.server);

// Learn
const rustCollection = await getLangCollection(Collection.rust);

const { tab, collection, slug } = Astro.props;
const lang: Language = Astro.props.lang ?? defaultLang;

const tabClass = (tab: DocsTab, current: DocsTab) => {
  const isCurrent = (tab: DocsTab, current: DocsTab) => {
    switch (tab) {
      case DocsTab.Docs:
        return current === DocsTab.Docs;
      case DocsTab.Api:
        return current === DocsTab.Api;
      case DocsTab.Learn:
        return current === DocsTab.Learn;
    }
  }
  return isCurrent(tab, current) ? "is-active" : "";
}

const displayStyle = (menu: DocsMenuId, tab: DocsTab) => {
  const isVisible = (menu: DocsMenuId, tab: DocsTab) => {
    switch (menu) {
      case DocsMenuId.Docs:
        return tab === DocsTab.Docs;
      case DocsMenuId.Api:
        return tab === DocsTab.Api;
      case DocsMenuId.Learn:
        return tab === DocsTab.Learn;
    }
  }
  const marginBottom = (menu: DocsMenuId) => {
    switch (menu) {
      case DocsMenuId.Docs:
        return 1 + tutorialCollection[lang].length + 1 + howToCollection[lang].length + 1 + explanationCollection[lang].length + 1 + referenceCollection[lang].length;
      case DocsMenuId.Api:
        return 1 + organizationsCollection.length;
      case DocsMenuId.Learn:
        return 1 + rustCollection[lang].length;
    }
  }
  return `display: ${isVisible(menu, tab) ? "block" : "none"}; margin-bottom: ${marginBottom(menu) * 1.5}rem;`;
}
---

<aside class="menu is-sticky">
  <LangButton lang={lang} tab={tab} collection={collection} slug={slug} />
  <!-- Docs -->
  <div class="tabs is-centered">
    <ul>
      <li id={DocsTab.Docs} class={tabClass(DocsTab.Docs, tab)}><a>Docs</a></li>
      <li id={DocsTab.Api} class={tabClass(DocsTab.Api, tab)}><a>API</a></li>
      <li id={DocsTab.Learn} class={tabClass(DocsTab.Learn, tab)}><a>Learn</a></li>
    </ul>
  </div>
  <nav id={DocsMenuId.Docs} style={displayStyle(DocsMenuId.Docs, tab)}>
    {[
      {
        label: tutorial(lang),
        collection: Collection.tutorial,
        content: tutorialCollection[lang],
      },
      {
        label: howTo(lang),
        collection: Collection.how_to,
        content: howToCollection[lang],
      },
      {
        label: explanation(lang),
        collection: Collection.explanation,
        content: explanationCollection[lang],
      },
      {
        label: reference(lang),
        collection: Collection.reference,
        content: referenceCollection[lang],
        prefix: (
          <li>
            <a href={`/${langPath(lang)}docs/reference/api`}>REST API</a>
          </li>
          <li>
            <a href={`/${langPath(lang)}docs/reference/architecture/`}>{architecture(lang)}</a>
          </li>
        ),
      }
    ].map(({ label, collection, content, prefix }) => (
      <p class="menu-label">{label}</p>
      <ul class="menu-list">
        {prefix}
        {
          content?.map((page) => (
            <li>
              <a href={`/${langPath(lang)}docs/${collectionPath(collection)}/${page.slug}/`}>{page.data.title}</a>
            </li>
          ))
        }
      </ul>
    ))}
  </nav>
  <!-- API -->
  <nav id={DocsMenuId.Api} style={displayStyle(DocsMenuId.Api, tab)}>
    {[
      {
        label: "Organizations",
        collection: Collection.organizations,
        content: organizationsCollection,
      },
      {
        label: "Projects",
        collection: Collection.projects,
        content: projectsCollection,
      },
      {
        label: "Users",
        collection: Collection.users,
        content: usersCollection,
      },
      {
        label: "Server",
        collection: Collection.server,
        content: serverCollection,
      }
    ].map(({ label, collection, content }) => (
      <p class="menu-label">{label}</p>
      <ul class="menu-list">
        {
          content?.map((page) => (
            <li>
              <a href={`/${langPath(lang)}docs/api/${collectionPath(collection)}/${page.slug}/`}>{page.data.title}</a>
            </li>
          ))
        }
      </ul>
    ))}
  </nav>
  <!-- Learn -->
  <nav id={DocsMenuId.Learn} style={displayStyle(DocsMenuId.Learn, tab)}>
    {[
      {
        label: benchmarking(lang),
        sections: [
          {
            section: "Rust",
            collection: Collection.rust,
            content: rustCollection,
          }
        ],
      },
    ].map(({ label, sections }) => (
      <p class="menu-label">{label}</p>
      <div>
      {sections.map(({ section, collection, content }) => (
        <p>{section}</p>
        <ul class="menu-list">
          {
            content[lang]?.map((page) => (
              <li>
                <a href={`/${langPath(lang)}learn/${collectionPath(collection)}/${page.slug}/`}>{page.data.title}</a>
              </li>
            ))
          }
        </ul>
      ))}
      </div>
    ))}
  </nav>
</aside>
<script >
  import {DocsTab, DocsMenuId} from "./docs_tab";

  // Find all buttons with the `alert` class on the page.
  const docsTab = document.getElementById(DocsTab.Docs);
  const apiTab = document.getElementById(DocsTab.Api);
  const learnTab = document.getElementById(DocsTab.Learn);

  const docsMenu = document.getElementById(DocsMenuId.Docs);
  const apiMenu = document.getElementById(DocsMenuId.Api);
  const learnMenu = document.getElementById(DocsMenuId.Learn);

  function setDocs() {
    docsTab?.classList.add("is-active");
    apiTab?.classList.remove("is-active");
    learnTab?.classList.remove("is-active");

    docsMenu ? docsMenu.style.display = "block" : null;
    apiMenu ? apiMenu.style.display = "none" : null;
    learnMenu ? learnMenu.style.display = "none" : null;
  }

  function setApi() {
    docsTab?.classList.remove("is-active");
    apiTab?.classList.add("is-active");
    learnTab?.classList.remove("is-active");

    docsMenu ? docsMenu.style.display = "none" : null;
    apiMenu ? apiMenu.style.display = "block" : null;
    learnMenu ? learnMenu.style.display = "none" : null;
  }

  function setLearn() {
    docsTab?.classList.remove("is-active");
    apiTab?.classList.remove("is-active");
    learnTab?.classList.add("is-active");

    docsMenu ? docsMenu.style.display = "none" : null;
    apiMenu ? apiMenu.style.display = "none" : null;
    learnMenu ? learnMenu.style.display = "block" : null;
  }

  docsTab?.addEventListener("click", () => {
    setDocs();
  });
  apiTab?.addEventListener("click", () => {
    setApi();
  });
  learnTab?.addEventListener("click", () => {
    setLearn();
  });
</script>